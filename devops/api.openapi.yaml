openapi: 3.0.3

info:
  title: API for Car Hunter website
  contact:
    email: gitlanm@gmail.com
  license:
    name: GPLv3
    url: https://www.gnu.org/licenses/gpl-3.0.en.html
  version: 0.1.0 alpha
servers:
  - url: http://localhost:8081/api
externalDocs:
  description: See our source code
  url: https://github.com/5anji/car-hunter

tags:
  - name: Authorization
    description: Operations about Authorization
  - name: Vehicles
    description: Operations about Vehicles

paths:
  /register:
    post:
      tags:
        - Authorization
      summary: Register new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - fullName
                - email
                - password
              properties:
                fullName:
                  type: string
                  example: Firstname Lastname
                  description: Fullname
                email:
                  type: string
                  example: johndoe@gmail.com
                  description: Mail adress
                password:
                  type: string
                  example: 1234567890qwerty
                  description: Password (more than 8 characters, any letter and digit must be included)
      responses:
        201:
          description: Created
        400:
          description: Invalid status value
  /login:
    post:
      tags:
        - Authorization
      summary: Authentificate user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: johndoe@gmail.com
                  description: Mail adress
                password:
                  type: string
                  example: 1234567890qwerty
                  description: Password (more than 8 characters, any letter and digit must be included)
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ2YW5lYUBnbWFpbC5jb20iLCJpYXQiOjE2OTYyMzcyMDMsImV4cCI6MTY5NjI1NTIwM30.z-ZmudO8bRUq9xAS6b4OgJI_g4dd4SyrkG6c_TvkVFc
                    description: Generated access token
        400:
          description: Invalid status value
  /logout:
    delete:
      tags:
        - Authorization
      summary: Log out user
      security:
        - bearerAuth: []
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
  /vehicles:
    get:
      parameters:
        # pagination
        - name: pages
          in: query
          required: true
          schema:
            type: integer
          description: The number of pages to be returned
        - name: item-count
          in: query
          required: true
          schema:
            type: integer
            default: 10
          description: The numbers of items to be returned per page
        # search
        - name: search
          in: query
          schema:
            type: string
          description: Search for the given string and return all matched results
        # sorting
        - name: sort
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
          description: Mark to order ascending or descending
        - name: sort-by
          in: query
          schema:
            type: string
            enum:
              - auction-date
              - registration-date
          description: Select what to be sorted
        # filters
        - name: source-list
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              enum:
                - autobid.de
                - bca-europe.com
                # - 3rd_site.com
                # - 4th_site.com
          description: Array of strings that represents the include list of which sites must be searched
        - name: price-min
          in: query
          schema:
            type: integer
            format: uint32
          description: Minimum price of vehicle
        - name: price-max
          in: query
          schema:
            type: integer
            format: uint32
          description: Maximum price of vehicle
        - name: body-type
          in: query
          schema:
            type: string
            # enum:
            #   - Sedan
            #   - Coupe
            #   - Wagon
            #   - Hatchback
            #   - Van
            #   - Cabrio
          description: Body type of vehicle
        - name: mileage-min
          in: query
          schema:
            type: integer
            format: uint32
          description: Minimum mileage of vehicle
        - name: mileage-max
          in: query
          schema:
            type: integer
            format: uint32
          description: Maximum mileage of vehicle
        - name: ecap-min
          in: query
          schema:
            type: number
            format: double
          description: Engine capacity of the vehicle
        - name: ecap-max
          in: query
          schema:
            type: number
            format: double
          description: Engine capacity of the vehicle
      tags:
        - Vehicles
      summary: Get all vehicles
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Vehicle"
        404:
          description: No vehicle found
  /vehicle/{id}:
    get:
      tags:
        - Vehicles
      summary: Get one vehicle by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: uint64
            example: 2
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vehicle_ext"
        400:
          description: Invalid ID supplied
        404:
          description: Vehicle not found
components:
  schemas:
    Vehicle:
      type: object
      properties:
        id:
          type: integer
          format: uint64
          example: 2
        title:
          type: string
          example: Mercedes-Benz Sprinter
        photo_url:
          type: string
          description: preview image url of the vehicle
          format: url
          example: http://cdn.example.com/image.jpg
        price:
          type: integer
          format: int32
          example: 11
        auction_date:
          type: string
          format: date-time
          pattern: "18 MMM YYYY hh:mm"
          example: 18 Oct 2023 14:30
    Vehicle_ext:
      type: object
      properties:
        id:
          type: integer
          format: uint64
          example: 2
        title:
          type: string
          example: Mercedes-Benz Sprinter
        photo_urls:
          type: array
          description: array of image urls of the vehicle
          items:
            type: string
            format: url
          example:
            [
              http://cdn.example.com/image.jpg,
              http://cdn.example.com/scratch.jpg,
              http://cdn.example.com/interior.jpg,
              http://cdn.example.com/engine.jpg,
            ]
        price:
          type: integer
          description: price in euros (â‚¬)
          format: uint32
          example: 11499
        body_type:
          type: string
          example: Van
        date_of_registration:
          type: string
          format: date-time
          pattern: MMM YYYY
          example: Aug 2021
        mileage:
          type: integer
          description: Dimension unit is KM
          format: uint32
          example: 120500
        engine_capacity:
          type: number
          description: Engine volume in liters
          format: double
          example: 2.5
        gearbox:
          type: string
          example: 5-speed manual
        url:
          type: string
          description: source url of the found vehicle
          format: url
          example: http://example.com
        auction_date:
          type: string
          format: date-time
          pattern: DD MMM YYYY hh:mm
          example: 18 Oct 2023 14:30
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
