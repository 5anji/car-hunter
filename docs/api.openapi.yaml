openapi: 3.0.3

info:
  title: API for Car Hunter website
  description: A basic API for getting information from DB, that contains scrapped car auction sites
  contact:
    email: gitlanm@gmail.com
  license:
    name: GPLv3
    url: https://www.gnu.org/licenses/gpl-3.0.en.html
  version: 0.1.0 alpha
servers:
  - url: http://localhost:8081/api
externalDocs:
  description: See our source code
  url: https://github.com/5anji/car-hunter

tags:
  - name: "Authorization"
    description: Operations about Authorization
  - name: "Vehicles"
    description: Operations about Vehicles

paths:
  /register:
    post:
      tags:
        - "Authorization"
      summary: Register new user
      operationId: createUser
      requestBody:
        required: true
        description: Profile registration body
        content:
          application/json:
            schema:
              type: object
              required:
                - fullName
                - email
                - password
              properties:
                fullName:
                  type: string
                  example: Firstname Lastname
                  description: Fullname
                email:
                  type: string
                  example: johndoe@gmail.com
                  description: Mail adress
                password:
                  type: string
                  example: 1234567890qwerty
                  description: Password (more than 8 characters, any letter and digit must be included)
      responses:
        "201":
          description: Created
        "400":
          description: Invalid status value
        "500":
          description: return internal exception/error as response
  /login:
    post:
      tags:
        - "Authorization"
      summary: Authentificate user
      operationId: createSession
      requestBody:
        required: true
        description: Login schema
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: johndoe@gmail.com
                  description: Mail adress
                password:
                  type: string
                  example: 1234567890qwerty
                  description: Password (more than 8 characters, any letter and digit must be included)
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  access-token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ2YW5lYUBnbWFpbC5jb20iLCJpYXQiOjE2OTYyMzcyMDMsImV4cCI6MTY5NjI1NTIwM30.z-ZmudO8bRUq9xAS6b4OgJI_g4dd4SyrkG6c_TvkVFc
                    description: Generated access token
        "400":
          description: Invalid status value
        "500":
          description: return internal exception/error as response
  /logout:
    delete:
      tags:
        - "Authorization"
      summary: Log out user
      operationId: deleteSession
      security:
        - bearerAuth: []
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "500":
          description: return internal exception/error as response
  /vehicles:
    get:
      tags:
        - "Vehicles"
      summary: Get all vehicles
      operationId: getVehicles
      requestBody:
        required: true
        description: Schema for applying filters and pagination
        content:
          application/json:
            schema:
              type: object
              required:
                - page
                - per-page
              properties:
                # pagination
                page:
                  type: integer
                  example: 3
                  description: The number of page
                per-page:
                  type: integer
                  default: 10
                  example: 15
                  description: The numbers of items to be returned per page
                # search
                search:
                  type: string
                  example: BMW%20340
                  description: Search for the given string and return all matched results
                # sorting
                sort:
                  type: string
                  enum:
                    - asc
                    - desc
                  default: asc
                  example: asc
                  description: Mark to order ascending or descending
                sort-by:
                  type: string
                  enum:
                    - auction-date
                    - registration-date
                  default: auction-date
                  example: auction-date
                  description: Select what to be sorted
                # filters
                source-list:
                  type: array
                  items:
                    type: string
                    enum:
                      - autobid.de
                      - bca-europe.com
                      # - 3rd_site.com
                      # - 4th_site.com
                    example: [autobid.de, bca-europe.com]
                  description: Array of strings that represents the include list of which sites must be searched
                price-min:
                  type: integer
                  format: uint32
                  example: 9000
                  description: Minimum price of vehicle in euros
                price-max:
                  type: integer
                  format: uint32
                  example: 45000
                  description: Maximum price of vehicle in euros
                # - name: body-type
                #   in: query
                #   schema:
                #     type: string
                #     # enum:
                #     #   - Sedan
                #     #   - Coupe
                #     #   - Wagon
                #     #   - Hatchback
                #     #   - Van
                #     #   - Cabrio
                #   description: Body type of vehicle
                mileage-min:
                  type: integer
                  format: uint32
                  example: 50000
                  description: Minimum mileage of vehicle in km
                mileage-max:
                  type: integer
                  format: uint32
                  example: 200000
                  description: Maximum mileage of vehicle in km
                dis-min:
                  type: number
                  format: double
                  example: 2.2
                  description: Displacement (minimum) of the vehicle in liters
                dis-max:
                  type: number
                  format: double
                  example: 3.5
                  description: Displacement (maximum) of the vehicle in liters
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  total-items:
                    type: integer
                    description: Number of total vehicles found
                  found:
                    type: integer
                    description: Number of vehicles found in current page
                  page:
                    type: integer
                    description: The page specified from query param
                  per-page:
                    type: integer
                    description: The numbers of items to be returned per page specified from query param
                  vehicles:
                    type: array
                    items:
                      $ref: "#/components/schemas/Vehicle"
        "401":
          description: Unauthorized
        "404":
          description: No vehicle found
        "500":
          description: return internal exception/error as response
  /vehicle/{id}:
    get:
      tags:
        - "Vehicles"
      summary: Get one vehicle by id
      operationId: getVehicleById
      parameters:
        - name: id
          in: path
          required: true
          description: id of the vehicle
          schema:
            type: integer
            format: uint64
            example: 2
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VehicleExt"
        "400":
          description: Invalid ID supplied
        "401":
          description: Unauthorized
        "404":
          description: Vehicle not found
        "500":
          description: return internal exception/error as response
components:
  schemas:
    Vehicle:
      type: object
      description: Schema of vehicle used in main page
      properties:
        title:
          type: string
          example: Mercedes-Benz Sprinter
        photo_url:
          type: string
          description: preview image url of the vehicle
          format: url
          example: http://cdn.example.com/image.jpg
        price:
          type: integer
          format: int32
          example: 11
        auction-date:
          type: string
          description: Date returned in following format DD MMM YYYY hh:mm
          pattern: ^(\d{2})\s([A-Za-z]{3})\s(\d{4})\s(\d{2}:\d{2})$
          example: 18 Oct 2023 14:30
    VehicleExt:
      type: object
      description: Schema of vehicle used in advanced view page
      properties:
        title:
          type: string
          example: Mercedes-Benz Sprinter
        photo-urls:
          type: array
          description: array of image urls of the vehicle
          items:
            type: string
            format: url
          example:
            [
              http://cdn.example.com/image.jpg,
              http://cdn.example.com/scratch.jpg,
              http://cdn.example.com/interior.jpg,
              http://cdn.example.com/engine.jpg,
            ]
        price:
          type: integer
          description: price in euros (€)
          format: uint32
          example: 11499
        body-type:
          type: string
          example: Van
        registration-date:
          type: string
          description: Date returned in following format MMM YYYY
          pattern: ^([A-Za-z]{3})\s(\d{4})$
          example: Aug 2021
        mileage:
          type: integer
          description: Dimension unit is KM
          format: uint32
          example: 120500
        displacement:
          type: number
          description: Engine volume in liters
          format: double
          example: 2.5
        gearbox:
          type: string
          example: 5-speed manual
        url:
          type: string
          description: source url of the found vehicle
          format: url
          example: http://example.com
        auction-date:
          type: string
          description: Date returned in following format DD MMM YYYY hh:mm
          pattern: ^(\d{2})\s([A-Za-z]{3})\s(\d{4})\s(\d{2}:\d{2})$
          example: 18 Oct 2023 14:30
  securitySchemes:
    bearerAuth:
      description: Security schema used for login/logout system
      type: http
      scheme: bearer
      bearerFormat: JWT
